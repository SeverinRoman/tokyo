#include "/Engine/Public/Platform.ush"
#include "/Engine/Generated/UniformBuffers/View.ush"
//#include "SceneTexturesCommon.ush"
DECLARE_UNIFORM_BUFFER(View);

RWTexture2D<float4> OutputTexture : register(u0); // Render Targetへの書き込み用

Texture2D<float4> InputTexture;

Texture2D CustomDepthTexture;
Texture2D<uint2> CustomStencilTexture;

Texture2D SceneDepthTexture : register(t0);
SamplerState DepthSampler : register(s0);

//SamplerState InputSampler;


float GetLinearDepth(float2 UV, uint2 pixelCoord)
{
    
    //float DeviceZ = SceneDepthTexture.SampleLevel(DepthSampler, UV, 0).r;
    float DeviceZ = InputTexture[pixelCoord].x;
    return 1.0f / (DeviceZ * View.InvDeviceZToWorldZTransform[2] - View.InvDeviceZToWorldZTransform[3]);

/*    
    float Depth = SceneDepthTexture.SampleLevel(DepthSampler, UV, 0).r;

    float ZNear = View.ViewToClip[3][2] / View.ViewToClip[2][2];
    float ZFar = View.ViewToClip[3][2] / (View.ViewToClip[2][2] - 1.0);

    // 非リニア深度をリニア深度に変換
    float LinearDepth = ZFar * ZNear / (ZNear + Depth * (ZFar - ZNear));
    return LinearDepth;
*/
}

float ToLinearDepth(float DeviceZ)
{
    
    //float DeviceZ = SceneDepthTexture.SampleLevel(DepthSampler, UV, 0).r;
    //float DeviceZ = InputTexture[pixelCoord].x;
    return 1.0f / (DeviceZ * View.InvDeviceZToWorldZTransform[2] - View.InvDeviceZToWorldZTransform[3]);
}


[numthreads(8, 8, 1)]
void MainCS(uint3 DispatchThreadID : SV_DispatchThreadID)
{
#if FEATURE_LEVEL >= FEATURE_LEVEL_SM6
    uint width, height;
    OutputTexture.GetDimensions(width, height);

    
    float2 ViewSize = View.ViewSizeAndInvSize.xy;
    
    // ピクセル座標を取得
    uint2 pixelCoord = DispatchThreadID.xy;

    
    // 簡単な例として、座標に基づく色を書き込み
    //float4 color = float4(float(pixelCoord.x) / width, float(pixelCoord.y) / height, 0.5, 1.0);
    float4 color = float4(float(pixelCoord.x) / ViewSize.x, float(pixelCoord.y) / ViewSize.y, 0.5, 1.0);
    //if (color.x < 0.5)  color.x = 1;
    //if (pixelCoord.x == pixelCoord.y) color = 0;
    //color.xyz = 0;
    //OutputTexture[pixelCoord] = color;

    //OutputTexture[pixelCoord] = InputTexture[pixelCoord].xxxw;// / 10.f;

    {
        float2 UV = ViewSize / float2(width, height);
        
        float Depth = InputTexture[pixelCoord].xyz;//SceneDepthTexture.SampleLevel(DepthSampler, UV, 0);
        
        float LinearDepth = GetLinearDepth(UV, pixelCoord);

        float t = saturate(LinearDepth / 5000.f);
        
        float3 color = lerp(float3(0, 0, 1), float3(0, 1, 0), t); // 青→緑
        color = lerp(color, float3(1, 0, 0), t); // 緑→赤
        
        //OutputTexture[pixelCoord].xyz = color; //        frac(LinearDepth / 5000.f);
        //OutputTexture[pixelCoord] = float4(LinearDepth / 1000.0, 0.0, 0.0, 1.0);

    }
    //    CustomStencilTexture
    //OutputTexture[pixelCoord].xyz = color; //        frac(LinearDepth / 5000.f);

    if (CustomStencilTexture[pixelCoord].y >= 1)
    {
        if (InputTexture[pixelCoord].r <= CustomDepthTexture[pixelCoord].r)
        {
            if (pixelCoord.x > 10 && pixelCoord.y > 10)
            {
                float depth = InputTexture[pixelCoord].r;
                float depth_linear = ToLinearDepth(depth);

                for (int x = 0; x < 5; ++x)
                {
                    float t = InputTexture[pixelCoord - uint2(x, x) * 2].r;
                    float t_linear = ToLinearDepth(t);

                    //if (depth < t - 0.01)
                    if (depth_linear < t_linear + 0.00001)
                    {
                        OutputTexture[pixelCoord].xyz *= 2; //                1; //        frac(LinearDepth / 5000.f);
                        break;
                    }

                }
            }
        }
    }
#endif
}